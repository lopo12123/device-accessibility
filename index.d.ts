/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/** 辅助键 (ctrl / shift / alt 中的 0/1/2/3 个) */
export interface ExtraKey {
  ctrl?: boolean
  /** windows/linux -- `alt`; macos -- `option` */
  alt?: boolean
  shift?: boolean
  /** windows -- `win`; linux -- `super`; macos -- `command` */
  meta?: boolean
}
/** 组合键情况 (目标键 + 辅助键) */
export interface KeyCombination {
  /** 目标键 */
  key: 'F1' | 'F2' | 'F3' | 'F4' | 'F5' | 'F6' | 'F7' | 'F8' | 'F9' | 'F10' | 'F11' | 'F12' | 'Digit0' | 'Digit1' | 'Digit2' | 'Digit3' | 'Digit4' | 'Digit5' | 'Digit6' | 'Digit7' | 'Digit8' | 'Digit9' | 'KeyA' | 'KeyB' | 'KeyC' | 'KeyD' | 'KeyE' | 'KeyF' | 'KeyG' | 'KeyH' | 'KeyI' | 'KeyJ' | 'KeyK' | 'KeyL' | 'KeyM' | 'KeyN' | 'KeyO' | 'KeyP' | 'KeyQ' | 'KeyR' | 'KeyS' | 'KeyT' | 'KeyU' | 'KeyV' | 'KeyW' | 'KeyX' | 'KeyY' | 'KeyZ' | 'Meta' | 'Escape' | 'Tab' | 'CapsLock' | 'Shift' | 'Control' | 'Alt' | 'Space' | 'ArrowUp' | 'ArrowRight' | 'ArrowDown' | 'ArrowLeft' | 'Enter' | 'Backspace' | 'Delete' | 'Home' | 'PageUp' | 'PageDown' | 'End' | 'Backquote' | 'Minus' | 'Equal' | 'BracketLeft' | 'BracketRight' | 'Comma' | 'Period' | 'Semicolon' | 'Quote' | 'Slash' | 'BackSlash' | 'ShiftLeft' | 'ShiftRight' | 'ControlLeft' | 'ControlRight' | 'AltLeft' | 'AltRight' | 'Numpad0' | 'Numpad1' | 'Numpad2' | 'Numpad3' | 'Numpad4' | 'Numpad5' | 'Numpad6' | 'Numpad7' | 'Numpad8' | 'Numpad9' | 'NumpadAdd' | 'NumpadSubtract' | 'NumpadMultiply' | 'NumpadDivide'
  /** 辅助键 见[ExtraKey] */
  extra?: ExtraKey
}
/** 按键事件 (目标键 + 辅助键 + 按键状态) */
export interface KeyEv {
  /** 目标键 */
  key: 'F1' | 'F2' | 'F3' | 'F4' | 'F5' | 'F6' | 'F7' | 'F8' | 'F9' | 'F10' | 'F11' | 'F12' | 'Digit0' | 'Digit1' | 'Digit2' | 'Digit3' | 'Digit4' | 'Digit5' | 'Digit6' | 'Digit7' | 'Digit8' | 'Digit9' | 'KeyA' | 'KeyB' | 'KeyC' | 'KeyD' | 'KeyE' | 'KeyF' | 'KeyG' | 'KeyH' | 'KeyI' | 'KeyJ' | 'KeyK' | 'KeyL' | 'KeyM' | 'KeyN' | 'KeyO' | 'KeyP' | 'KeyQ' | 'KeyR' | 'KeyS' | 'KeyT' | 'KeyU' | 'KeyV' | 'KeyW' | 'KeyX' | 'KeyY' | 'KeyZ' | 'Meta' | 'Escape' | 'Tab' | 'CapsLock' | 'Shift' | 'Control' | 'Alt' | 'Space' | 'ArrowUp' | 'ArrowRight' | 'ArrowDown' | 'ArrowLeft' | 'Enter' | 'Backspace' | 'Delete' | 'Home' | 'PageUp' | 'PageDown' | 'End' | 'Backquote' | 'Minus' | 'Equal' | 'BracketLeft' | 'BracketRight' | 'Comma' | 'Period' | 'Semicolon' | 'Quote' | 'Slash' | 'BackSlash' | 'ShiftLeft' | 'ShiftRight' | 'ControlLeft' | 'ControlRight' | 'AltLeft' | 'AltRight' | 'Numpad0' | 'Numpad1' | 'Numpad2' | 'Numpad3' | 'Numpad4' | 'Numpad5' | 'Numpad6' | 'Numpad7' | 'Numpad8' | 'Numpad9' | 'NumpadAdd' | 'NumpadSubtract' | 'NumpadMultiply' | 'NumpadDivide'
  /** 辅助键 见[ExtraKey] */
  extra?: ExtraKey
  /** 是否是按下状态 (默认为 `false`) */
  down?: boolean
}
/** 鼠标事件 (目标键 + 按键状态) */
export interface MouseEv {
  key: 'Left' | 'Middle' | 'Right'
  /** 是否是按下状态 (默认为 `false`) */
  down?: boolean
}
/** 坐标 */
export interface MouseLocation {
  /** x 方向 (`i32`) */
  x: number
  /** y 方向 (`i32`) */
  y: number
}
/** 图像数据 */
export interface RawImage {
  /** 图像原始宽度 */
  w: number
  /** 图像原始高度 */
  h: number
  /** 图像字节 */
  bytes: Array<number>
}
/** 剪切板单项的存储结构 */
export interface ClipboardItem {
  /** 是否是图像 (true -- 图像; false -- 文本) */
  isImage: boolean
  /** 文本数据 (`is_image` 为 `true` 时为 null) */
  textData?: string
  /** 图像数据 (`is_image` 为 `false` 时为 null) */
  imageData?: RawImage
}
/** 检查键盘按键名是否合法 */
export function checkKey(key: string): boolean
/** 检查鼠标按键名是否合法 */
export function checkMouse(key: string): boolean
export function helloworld(): string
export class Controller {
  constructor()
  /** 键盘 -- 按下 */
  keyDown(key: KeyCombination['key']): void
  /** 键盘 -- 释放 */
  keyUp(key: KeyCombination['key']): void
  /** 键盘 -- 点击 (即 `key_down - 20ms - key_up`) */
  keyClick(keys: KeyCombination): void
  /** 键盘 -- 输入 */
  keyType(sentence: string): void
  /** 鼠标 -- 按下 */
  mouseDown(key: MouseEv['key']): void
  /** 鼠标 -- 释放 */
  mouseUp(key: MouseEv['key']): void
  /** 鼠标 -- 点击 (即 `mouse_down - 20ms - mouse_up`) */
  mouseClick(key: MouseEv['key']): void
  /**
   * 鼠标 -- 滚动
   * `scale`: 整数. 正向左/上, 负向右/下
   * `horizontal`: 是否水平滚动, 默认 `false`
   */
  mouseScroll(scale: number, horizontal?: boolean | undefined | null): void
  /**
   * 鼠标 -- 移动
   * `direction`: 移动方向 (默认为绝对定位: 屏幕左上角为原点,向右向下为正)
   * `relative`: 是否使用相对定位(相对当前鼠标位置), 默认 `false`
   */
  mouseMove(direction: MouseLocation, relative?: boolean | undefined | null): void
  /** 鼠标 -- 当前坐标 */
  mouseLocation(): MouseLocation
}
export class Observer {
  /** thread-safe function test */
  tsfnTest(callback: (err: null | Error) => void): void
  constructor()
  /** 已注册的按键事件 (使用数组返回, 其值可视为集合, 无重复) */
  get registeredKeys(): Array<KeyEv>
  /** 注册/更新按键监听事件 (支持组合键) */
  onKey(keys: KeyEv, callback: (err: null | Error) => void): void
  /** 移除已注册的监听 */
  offKey(keys: KeyEv): void
  /** 注册/更新对全部按键的监听事件 */
  onKeyAll(callback: (err: null | Error, key_ev: { key: KeyEv['key'], down: boolean }) => void): void
  /** 移除对全部按键的监听事件 */
  offKeyAll(): void
  /** 主动触发已注册的按键事件 (返回值表示该组合键是否已注册) */
  touch(keys: KeyEv): boolean
  /** 结束监听 (必须调用! 否则会由于过度持有引用造成内存泄露) */
  dispose(): void
}
export class Clipboard {
  /** 队列的当前长度 */
  get len(): number
  /** 队列的最大长度 */
  get maxLen(): number
  /** 当前的存储队列 */
  get records(): Array<ClipboardItem>
  constructor(length: number)
  /**
   * Synchronize latest item from system clipboard.
   *
   * Return the latest item read from system clipboard.
   */
  sync(): ClipboardItem
  /** Get the item at `offset` (default to `0`) in the queue, `offset` equal to zero means the most recent item. */
  getItem(offset?: number | undefined | null): ClipboardItem
  /** Get the text at `offset` (default to `0`) in the queue, `offset` equal to zero means the most recent text. */
  getText(offset?: number | undefined | null): string
  /**
   * Get the image at `offset` (default to `0`) in the queue, `offset` equal to zero means the most recent image.
   *
   * Here are two example situation where the user would copy the pixel values.
   * - When you right click on an image in a browser and then click on "Copy image" (works in Firefox and Chrome)
   * - When you select an area of an image in an image editor software and press `Control(Command)+C`
   */
  getImage(offset?: number | undefined | null): RawImage
  /**
   * Put an item at the head of the queue, if the queue reaches the maximum length, the last item will be discarded.
   *
   * Return new length of the queue.
   */
  putItem(item: ClipboardItem): number
  /**
   * Put an text at the head of the queue, if the queue reaches the maximum length, the last item will be discarded.
   *
   * Return new length of the queue.
   */
  putText(text: string): number
  /**
   * Put an image at the head of the queue, if the queue reaches the maximum length, the last item will be discarded.
   *
   * Return new length of the queue.
   */
  putImage(image: RawImage): number
}
