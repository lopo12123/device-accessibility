use device_query::{Keycode as DQKey, MouseButton as DQMouse};

pub struct DQMapper {}

#[allow(unused)]
impl DQMapper {
    /// device_query -> String
    pub fn encode_key(key: &DQKey) -> Option<String> {
        match key {
            DQKey::F1 => Some(String::from("F1")),
            DQKey::F2 => Some(String::from("F2")),
            DQKey::F3 => Some(String::from("F3")),
            DQKey::F4 => Some(String::from("F4")),
            DQKey::F5 => Some(String::from("F5")),
            DQKey::F6 => Some(String::from("F6")),
            DQKey::F7 => Some(String::from("F7")),
            DQKey::F8 => Some(String::from("F8")),
            DQKey::F9 => Some(String::from("F9")),
            DQKey::F10 => Some(String::from("F10")),
            DQKey::F11 => Some(String::from("F11")),
            DQKey::F12 => Some(String::from("F12")),
            DQKey::Key0 => Some(String::from("Digit0")),
            DQKey::Key1 => Some(String::from("Digit1")),
            DQKey::Key2 => Some(String::from("Digit2")),
            DQKey::Key3 => Some(String::from("Digit3")),
            DQKey::Key4 => Some(String::from("Digit4")),
            DQKey::Key5 => Some(String::from("Digit5")),
            DQKey::Key6 => Some(String::from("Digit6")),
            DQKey::Key7 => Some(String::from("Digit7")),
            DQKey::Key8 => Some(String::from("Digit8")),
            DQKey::Key9 => Some(String::from("Digit9")),
            DQKey::A => Some(String::from("KeyA")),
            DQKey::B => Some(String::from("KeyB")),
            DQKey::C => Some(String::from("KeyC")),
            DQKey::D => Some(String::from("KeyD")),
            DQKey::E => Some(String::from("KeyE")),
            DQKey::F => Some(String::from("KeyF")),
            DQKey::G => Some(String::from("KeyG")),
            DQKey::H => Some(String::from("KeyH")),
            DQKey::I => Some(String::from("KeyI")),
            DQKey::J => Some(String::from("KeyJ")),
            DQKey::K => Some(String::from("KeyK")),
            DQKey::L => Some(String::from("KeyL")),
            DQKey::M => Some(String::from("KeyM")),
            DQKey::N => Some(String::from("KeyN")),
            DQKey::O => Some(String::from("KeyO")),
            DQKey::P => Some(String::from("KeyP")),
            DQKey::Q => Some(String::from("KeyQ")),
            DQKey::R => Some(String::from("KeyR")),
            DQKey::S => Some(String::from("KeyS")),
            DQKey::T => Some(String::from("KeyT")),
            DQKey::U => Some(String::from("KeyU")),
            DQKey::V => Some(String::from("KeyV")),
            DQKey::W => Some(String::from("KeyW")),
            DQKey::X => Some(String::from("KeyX")),
            DQKey::Y => Some(String::from("KeyY")),
            DQKey::Z => Some(String::from("KeyZ")),
            DQKey::Meta => Some(String::from("Meta")),
            DQKey::Escape => Some(String::from("Escape")),
            DQKey::Tab => Some(String::from("Tab")),
            DQKey::CapsLock => Some(String::from("CapsLock")),
            DQKey::LShift => Some(String::from("ShiftLeft")),
            DQKey::RShift => Some(String::from("ShiftRight")),
            DQKey::LControl => Some(String::from("ControlLeft")),
            DQKey::RControl => Some(String::from("ControlRight")),
            DQKey::LAlt => Some(String::from("AltLeft")),
            DQKey::RAlt => Some(String::from("AltRight")),
            DQKey::Space => Some(String::from("Space")),
            DQKey::Up => Some(String::from("ArrowUp")),
            DQKey::Right => Some(String::from("ArrowRight")),
            DQKey::Down => Some(String::from("ArrowDown")),
            DQKey::Left => Some(String::from("ArrowLeft")),
            DQKey::Enter => Some(String::from("Enter")),
            DQKey::Backspace => Some(String::from("Backspace")),
            DQKey::Delete => Some(String::from("Delete")),
            DQKey::Home => Some(String::from("Home")),
            DQKey::PageUp => Some(String::from("PageUp")),
            DQKey::PageDown => Some(String::from("PageDown")),
            DQKey::End => Some(String::from("End")),
            DQKey::Grave => Some(String::from("Backquote")),
            DQKey::Minus => Some(String::from("Minus")),
            DQKey::Equal => Some(String::from("Equal")),
            DQKey::LeftBracket => Some(String::from("BracketLeft")),
            DQKey::RightBracket => Some(String::from("BracketRight")),
            DQKey::Comma => Some(String::from("Comma")),
            DQKey::Dot => Some(String::from("Period")),
            DQKey::Semicolon => Some(String::from("Semicolon")),
            DQKey::Apostrophe => Some(String::from("Quote")),
            DQKey::Slash => Some(String::from("Slash")),
            DQKey::BackSlash => Some(String::from("BackSlash")),
            // 小键盘的按键不建议使用
            DQKey::Numpad0 => Some(String::from("Numpad0")),
            DQKey::Numpad1 => Some(String::from("Numpad1")),
            DQKey::Numpad2 => Some(String::from("Numpad2")),
            DQKey::Numpad3 => Some(String::from("Numpad3")),
            DQKey::Numpad4 => Some(String::from("Numpad4")),
            DQKey::Numpad5 => Some(String::from("Numpad5")),
            DQKey::Numpad6 => Some(String::from("Numpad6")),
            DQKey::Numpad7 => Some(String::from("Numpad7")),
            DQKey::Numpad8 => Some(String::from("Numpad8")),
            DQKey::Numpad9 => Some(String::from("Numpad9")),
            DQKey::NumpadAdd => Some(String::from("NumpadAdd")),
            DQKey::NumpadSubtract => Some(String::from("NumpadSubtract")),
            DQKey::NumpadMultiply => Some(String::from("NumpadMultiply")),
            DQKey::NumpadDivide => Some(String::from("NumpadDivide")),
            _ => None
        }
    }

    /// String -> device_query 
    pub fn decode_key(key: String) -> Option<DQKey> {
        match &key[..] {
            "F1" => Some(DQKey::F1),
            "F2" => Some(DQKey::F2),
            "F3" => Some(DQKey::F3),
            "F4" => Some(DQKey::F4),
            "F5" => Some(DQKey::F5),
            "F6" => Some(DQKey::F6),
            "F7" => Some(DQKey::F7),
            "F8" => Some(DQKey::F8),
            "F9" => Some(DQKey::F9),
            "F10" => Some(DQKey::F10),
            "F11" => Some(DQKey::F11),
            "F12" => Some(DQKey::F12),
            "Digit0" => Some(DQKey::Key0),
            "Digit1" => Some(DQKey::Key1),
            "Digit2" => Some(DQKey::Key2),
            "Digit3" => Some(DQKey::Key3),
            "Digit4" => Some(DQKey::Key4),
            "Digit5" => Some(DQKey::Key5),
            "Digit6" => Some(DQKey::Key6),
            "Digit7" => Some(DQKey::Key7),
            "Digit8" => Some(DQKey::Key8),
            "Digit9" => Some(DQKey::Key9),
            "KeyA" => Some(DQKey::A),
            "KeyB" => Some(DQKey::B),
            "KeyC" => Some(DQKey::C),
            "KeyD" => Some(DQKey::D),
            "KeyE" => Some(DQKey::E),
            "KeyF" => Some(DQKey::F),
            "KeyG" => Some(DQKey::G),
            "KeyH" => Some(DQKey::H),
            "KeyI" => Some(DQKey::I),
            "KeyJ" => Some(DQKey::J),
            "KeyK" => Some(DQKey::K),
            "KeyL" => Some(DQKey::L),
            "KeyM" => Some(DQKey::M),
            "KeyN" => Some(DQKey::N),
            "KeyO" => Some(DQKey::O),
            "KeyP" => Some(DQKey::P),
            "KeyQ" => Some(DQKey::Q),
            "KeyR" => Some(DQKey::R),
            "KeyS" => Some(DQKey::S),
            "KeyT" => Some(DQKey::T),
            "KeyU" => Some(DQKey::U),
            "KeyV" => Some(DQKey::V),
            "KeyW" => Some(DQKey::W),
            "KeyX" => Some(DQKey::X),
            "KeyY" => Some(DQKey::Y),
            "KeyZ" => Some(DQKey::Z),
            "Meta" => Some(DQKey::Meta),
            "Escape" => Some(DQKey::Escape),
            "Tab" => Some(DQKey::Tab),
            "CapsLock" => Some(DQKey::CapsLock),
            "Shift" => Some(DQKey::LShift),
            "Control" => Some(DQKey::LControl),
            "Alt" => Some(DQKey::LAlt),
            "Space" => Some(DQKey::Space),
            "ArrowUp" => Some(DQKey::Up),
            "ArrowRight" => Some(DQKey::Right),
            "ArrowDown" => Some(DQKey::Down),
            "ArrowLeft" => Some(DQKey::Left),
            "Enter" => Some(DQKey::Enter),
            "Backspace" => Some(DQKey::Backspace),
            "Delete" => Some(DQKey::Delete),
            "Home" => Some(DQKey::Home),
            "PageUp" => Some(DQKey::PageUp),
            "PageDown" => Some(DQKey::PageDown),
            "End" => Some(DQKey::End),
            "Backquote" => Some(DQKey::Grave),
            "Minus" => Some(DQKey::Minus),
            "Equal" => Some(DQKey::Equal),
            "BracketLeft" => Some(DQKey::LeftBracket),
            "BracketRight" => Some(DQKey::RightBracket),
            "Comma" => Some(DQKey::Comma),
            "Period" => Some(DQKey::Dot),
            "Semicolon" => Some(DQKey::Semicolon),
            "Quote" => Some(DQKey::Apostrophe),
            "Slash" => Some(DQKey::Slash),
            "BackSlash" => Some(DQKey::BackSlash),
            // 以下按键可明确指定左右
            "ShiftLeft" => Some(DQKey::LShift),
            "ShiftRight" => Some(DQKey::RShift),
            "ControlLeft" => Some(DQKey::LControl),
            "ControlRight" => Some(DQKey::RControl),
            "AltLeft" => Some(DQKey::LAlt),
            "AltRight" => Some(DQKey::RAlt),
            // 小键盘的按键不建议使用
            "Numpad0" => Some(DQKey::Numpad0),
            "Numpad1" => Some(DQKey::Numpad1),
            "Numpad2" => Some(DQKey::Numpad2),
            "Numpad3" => Some(DQKey::Numpad3),
            "Numpad4" => Some(DQKey::Numpad4),
            "Numpad5" => Some(DQKey::Numpad5),
            "Numpad6" => Some(DQKey::Numpad6),
            "Numpad7" => Some(DQKey::Numpad7),
            "Numpad8" => Some(DQKey::Numpad8),
            "Numpad9" => Some(DQKey::Numpad9),
            "NumpadAdd" => Some(DQKey::NumpadAdd),
            "NumpadSubtract" => Some(DQKey::NumpadSubtract),
            "NumpadMultiply" => Some(DQKey::NumpadMultiply),
            "NumpadDivide" => Some(DQKey::NumpadDivide),
            _ => None
        }
    }

    /// device_query -> String
    pub fn encode_mouse(mouse: &DQMouse) -> Option<String> {
        match mouse {
            1 => Some(String::from("Left")),
            2 => Some(String::from("Right")),
            3 => Some(String::from("Middle")),
            _ => None
        }
    }

    /// String -> device_query
    pub fn decode_mouse(mouse: String) -> Option<DQMouse> {
        match &mouse[..] {
            "Left" => Some(1),
            "Right" => Some(2),
            "Middle" => Some(3),
            _ => None
        }
    }
}